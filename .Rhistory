x = 1
y<-2
x+2
?sumary
?summary
summary(x,y)
x <- seq(1,10,2)
x
x*y
?readcsv
jdt = read.csv(C:\Users\Phong\Google Drive\CS6890Spring2015\data\defect
jdt = read.csv("C:\Users\Phong\Google Drive\CS6890Spring2015\data\defect")
jdt = read.csv("C:\\Users\\Phong\\Google Drive\\CS6890Spring2015\\data\\defect")
jdt = read.csv("C:\\Users\\Phong\\Google Drive\\CS6890Spring2015\\data\\defect\\JDT.csv")
boxplot(jdt$loc)
jdt_zeroBug <- jdt[jdt$bug == 0,)
jdt_zeroBug <- jdt[jdt$bug == 0,]
jdt_hasBug <- jdt[jdt$bug != 0,]
boxplost(jdt_zeroBug$loc)
boxplot(jdt_zeroBug$loc)
boxplot(jdt_zeroBug$loc,jdt_hasBug&loc)
boxplot(jdt_zeroBug$loc,jdt_hasBug$loc)
c = c(2,3,5)
x = c(2,3,5)
cities = c("new york", "los angeles", "san francisco")
dat = data.frame (cities, rank =x);
dat
mydat = list(jdt = jdt, city = dat)
summary(mydat)
summary(mydat$jdt)
mat <- matrix(1:6, nrow = 2, ncol = 3)
mat
mat <- matrix(1:7, nrow = 2, ncol = 3)
fix(mat)
mat
getwd()
q()
weight = c(126,123,117,120,123,123,124)
mean(weight)
weight = c(126,123,117,120,123,123,126)
mean(weight)
median(weight)
mode(weight)
dispersion(weight)
variance(weight)
var(weight)
sd(weight)
boxplot(weight)
quantile(weight,0.75)
quantile(weight,0.999)
quantile(weight,0.70)
quantile(weight,0.75)
quantile(weight,0.80)
height = c(176,173,177,170,173,173,176)
cor(height,weight)
cor(height,weight,method='spearman')
jdt = read.csv("C:\Users\Phong\Google Drive\CS6890Spring2015\data\defect\JDT.csv",header = T, row.names = 1)
jdt = read.csv("C:\\Users\\Phong\\Google Drive\\CS6890Spring2015\\data\\defect\\JDT.csv",header = T, row.names = 1)
cor(jdt)
cor(jdt,method='spearman')
dat = data.frame(weight,height)
dat
q()
pde = read.csv("C:\Users\Phong\Google Drive\CS6890Spring2015\data\defect\JDT.csv",header = T, row.names = 1)
pde = read.csv("C:\\Users\\Phong\\Google Drive\\CS6890Spring2015\\data\\defect\\JDT.csv",header = T, row.names = 1)
cor(jdt)
jdt.mod = lm(bug-bf, data = jdt)
jdt.mod = lm(bug~bf, data = jdt)
jdt.mod
sumary(jdt.mod)
summary(jdt.mod)
sqrt(0.4561)
jdt.mod = lm(bug~loc, data = jdt)
summary(jdt.mod)
pred.pde = predict(jdt.mod,data=pde)
summary(pred.pde)
jdt.mod = lm(bug~bf, data = jdt)
pred.pde = predict(jdt.mod,data=pde)
summary(pred.pde)
jdt.train = jdt[1:500,]
jdt.test = jdt[-(1:500),]
jdt.bf = lm(bug~bf,data=jdt.train)
jdt.test$predicted = predict(jdt.bf,jdt.test)
summary(jdt.test)
mean(abs(jdt.test$bug-jdt.test$predicted))
cor.test(jdt.test$bug,jdt.test$predicted,method='spearman')
jdt.loc = lm(bug~loc,data=jdt.train)
jdt.test$predicted.loc= predict(jdt.loc,jdt.test)
mean(abs(jdt.test$bug-jdt.test$predicted.loc))
cor.test(jdt.test$bug,jdt.test$predicted.loc,method='spearman')
jdt.bf.loc = lm(bug~bf+loc,data=jdt.train)
jdt.test$predicted.loc.bf= predict(jdt.bf.loc,jdt.test)
mean(abs(jdt.test$bug-jdt.test$predicted.loc.bf))
cor.test(jdt.test$bug,jdt.test$predicted.loc.bf,method='spearman')
source('E:\\R\example.R')
source('E:\\R\\example.R')
source('E:\R\example.R')
source('E:/R/example.R')
source('E:\\R\\example.R')
source('E:\\R\\example.R')
source('E:\\R\\example.R')
source('E:\\R\\example.R')
source('E:\\R\\example.R')
source('E:\\R\\example.R')
source('E:\\R\\example.R')
cross.validation = function(form, dat, ratio = 0.5, iter = 50) {
n = nrow(dat)
mae = rep(0, iter)
cor = rep(0, iter)
for (i in 1:iter) {
trainset = sample.int(n, n*ratio)
model = lm(form, data = dat[trainset,])
predicted = predict(model, dat[-trainset,])
actual = dat[-trainset,]$bug
mae[i] = mean(abs(predicted - actual))
cor[i] = cor.test(predicted, actual, method = 'spearman')$estimate
}
list(mean.err = mae, ranked.cor = cor)
} 
jdt.bf = cross.validation(bug~bf,jdt,0.667)
pde.bf = cross.validation(bug~bf,pde,0.667)
boxplot(jdt.bf$ranked.cor,pde.bf$ranked.cor,main='predictive power')
boxplot(jdt.bf$ranked.cor,pde.bf$ranked.cor,main='predictive power',name = ('JDT','PDE'))
boxplot(jdt.bf$ranked.cor,pde.bf$ranked.cor,main='predictive power',name = c('JDT','PDE'))
boxplot(jdt.bf$ranked.cor,pde.bf$ranked.cor,main='predictive power',names = c('JDT','PDE'))
q()
q()
setwd("E:/EclipseWorkspace/LexicalPreProcessingForReviews")
dir()
outw = read.csv("outwordcount.txt")
summary(outw)
outw = read.csv("outwordcount.txt", header = F)
names(outw) = c("word", "count")
summary(outw)
quantile(outw$count, 0.90)
quantile(outw$count, 0.99)
quantile(outw$count, 0.95)
q()
